include:
  - local: '.gitlab/workflow/backend-pipeline.yml'
  - local: '.gitlab/workflow/frontend-admin-pipeline.yml'
  - local: '.gitlab/workflow/frontend-user-pipeline.yml'

stages:
  - test  
  - build
  - unitest
  # - security_scanning
  - docker
  - deploy
  - notify

variables:
  DOCKER_REGISTRY: ${CI_REGISTRY}
  ENVIRONMENT: development

.docker-setup: &docker-setup
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add --no-cache docker-compose

deploy_staging:
  <<: *docker-setup
  stage: deploy
  script:
    - echo "DOCKER_TAG=$CI_COMMIT_SHA" > .env
    - docker pull $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_IMAGE/frontend-admin:$CI_COMMIT_SHA
    - docker pull $CI_REGISTRY_IMAGE/frontend-user:$CI_COMMIT_SHA
    - docker-compose up -d
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

deploy_production:
  <<: *docker-setup
  stage: deploy
  script:
    - echo "DOCKER_TAG=$CI_COMMIT_TAG" > .env
    - docker pull $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_TAG
    - docker pull $CI_REGISTRY_IMAGE/frontend-admin:$CI_COMMIT_TAG
    - docker pull $CI_REGISTRY_IMAGE/frontend-user:$CI_COMMIT_TAG
    - docker-compose up -d
  environment:
    name: production
  rules:
    - if: $CI_COMMIT_TAG
  when: manual

notify:
  stage: notify
  image: curlimages/curl:latest
  script:
    - |
      curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"âœ… Deployment successful: '"$CI_COMMIT_BRANCH"'"}' \
        $SLACK_WEBHOOK_URL
  rules:
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG
